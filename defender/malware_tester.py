import os
import subprocess
import requests
import json
import numpy as np

url = "http://127.0.0.1:8080/"

malware_folders = ['./mw1', './mw2', './mw3', './mw4', './mw5', './mw6', './mw7', './mw8']
goodware_folders = ['./gw1', './gw2', './gw3', './gw4', './gw5', './gw6']



for mw in malware_folders:
    mw_classified_malware = 0
    mw_classified_goodware = 0
    misclassified_malware = []
    non_200_status_files_malware_files = []
    num_malware_files = 0
    index_0_res = 0
    index_1_res = 0
    index_0 = []

    print("startin to process",mw)
    for path, subdirs, files in os.walk(mw):
        for name in files:
            file_name = os.path.join(path, name)
            with open(file_name, 'rb') as file:
                data = file.read()
                res = requests.post(url=url, data=data, headers={'Content-Type': 'application/octet-stream'})
                num_malware_files+=1
                if res.status_code == 200:
                    #print(num_malware_files, file_name, res.text)

                    result = json.loads(res.text)["result"]
                    if result == 1:
                        mw_classified_malware += 1
                    elif result == 0:
                        mw_classified_goodware += 1
                        misclassified_malware.append(file_name)

                    result_prob_0 = json.loads(res.text)["result_proba_0"]
                    result_prob_1 = json.loads(res.text)["result_proba_1"]
                    result_prob_unknown = json.loads(res.text)["result_proba_-1"]
                    label = json.loads(res.text)["result"]
                    result_prob_0_normalized = result_prob_0/(result_prob_0+result_prob_1)
                    result_prob_1_normalized = result_prob_1/(result_prob_0+result_prob_1)
                    #print(num_malware_files, file_name, f"gw-{result_prob_0_normalized}, mw-{result_prob_1_normalized}, u-{result_prob_unknown}")
                    
                    print(num_malware_files, file_name)
                    print(f"LABEL = {label}", f"gw-{result_prob_0_normalized}, mw-{result_prob_1_normalized}, u-{result_prob_unknown}")
                    
#                    index_0_res += result_prob_0_normalized
#                    index_1_res += result_prob_1
                    index_0.append(result_prob_0_normalized)
    #                print(result,result_prob_0, result_prob_1)
                else:
                    #print(f'{num_malware_files} {file_name} Got status other than 200 - misclassified\n')
                    misclassified_malware.append(file_name)
                    mw_classified_goodware += 1
                    non_200_status_files_malware_files.append(file_name)
    print("*******************************************************************")
    print(mw)
    print("Number of Malware File",num_malware_files)
    print("Malware Classified as Malware",mw_classified_malware)
    print("Malware Classified as Goodware",mw_classified_goodware)
    print("MisClassified Malware Files:", misclassified_malware)
    print(f"Non 200 status Malware files - automatically misclassified:\n{non_200_status_files_malware_files}")
    print("Percentage Correct :", mw_classified_malware/num_malware_files)
    if num_malware_files != 0:
#        print(f"index results avg [{index_0_res/num_malware_files}, {index_1_res/num_malware_files}]")
        #print("All the prob_0 values ",index_0)
        index_0_np = np.array(index_0)
        print(np.sort(index_0_np)[-3:])
        
        

print("*******************************************************************")

for gw in goodware_folders:
    gw_classified_malware = 0
    gw_classified_goodware = 0
    misclassified_goodware = []
    num_goodware_files = 0
    non_200_status_files_goodware_files = []
    index_0_res = 0.0
    index_1_res = 0.0
    index_0 = []

    for path, subdirs, files in os.walk(gw):
        for name in files:
            file_name = os.path.join(path, name)
            with open(file_name, 'rb') as file:
                data = file.read()
                res = requests.post(url=url, data=data, headers={'Content-Type': 'application/octet-stream'})
                num_goodware_files+=1
                if res.status_code == 200:
                    #print(num_goodware_files, file_name, res.text)

                    result = json.loads(res.text)["result"]
                    if result == 1:
                        gw_classified_malware += 1
                        misclassified_goodware.append(file_name)
                    elif result == 0:
                        gw_classified_goodware += 1


                    result_prob_0 = json.loads(res.text)["result_proba_0"]
                    result_prob_1 = json.loads(res.text)["result_proba_1"]
                    result_prob_unknown = json.loads(res.text)["result_proba_-1"]
                    label = json.loads(res.text)["result"]
                    result_prob_0_normalized = result_prob_0/(result_prob_0+result_prob_1)
                    result_prob_1_normalized = result_prob_1/(result_prob_0+result_prob_1)
                    print(num_goodware_files, file_name)
                    print(f"LABEL = {label}", f"gw-{result_prob_0_normalized}, mw-{result_prob_1_normalized}, u-{result_prob_unknown}")
#                    result_prob_0 = json.loads(res.text)["result_proba_0"]
#                    result_prob_1 = json.loads(res.text)["result_proba_1"]
#                    index_0_res += result_prob_0
#                    index_1_res += result_prob_1
                    index_0.append(result_prob_0_normalized)
                else:
                    #print(f'{num_goodware_files} {file_name} Got status other than 200 - misclassified\n')
                    misclassified_goodware.append(file_name)
                    gw_classified_malware += 1
                    non_200_status_files_goodware_files.append(file_name)
    print(gw)
    print("Number of Goodware File",num_goodware_files)
    print("Goodware Classified as Goodware",gw_classified_goodware)
    print("Goodware Classified as Malware",gw_classified_malware)
    print("MisClassified Goodware Files:", misclassified_goodware)
    print(f"Non 200 status Goodware files - automatically misclassified:\n{non_200_status_files_goodware_files}")
    print("Percentage Correct :", gw_classified_goodware/num_goodware_files)
    print(f"index results avg [{index_0_res/num_malware_files}, {index_1_res/num_malware_files}]")
    index_0_np = np.array(index_0)
    print(np.sort(index_0_np)[:3])


